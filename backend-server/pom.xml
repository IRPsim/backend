<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>de.unileipzig.irpsim</groupId>
		<artifactId>backend</artifactId>
		<version>0.2-SNAPSHOT</version>
	</parent>
	<artifactId>backend-server</artifactId>
	<name>backend-server</name>
	<description>Integriert die UI mit der Simulationsschicht und unterst√ºtzt die Datenhaltung</description>

	<scm>
		<connection>scm:git:git://localhost/${basedir}</connection>
	</scm>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<inherited>true</inherited>
				<configuration>
					<source>11</source>
					<target>11</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<version>6.0.0</version>
				<executions>
					<execution>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- ... -->

					<!-- this is false by default, forces the plugin to generate the git.properties 
						file -->
					<generateGitPropertiesFile>true</generateGitPropertiesFile>

					<!-- The path for the properties file to be generated. See Super Pom 
						for default variable reference https://maven.apache.org/guides/introduction/introduction-to-the-pom.html -->
					<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<environmentVariables>
						<IRPSIM_MYSQL_USER_TEST>root</IRPSIM_MYSQL_USER_TEST>
						<IRPSIM_MYSQL_PASSWORD_TEST>test123</IRPSIM_MYSQL_PASSWORD_TEST>
					</environmentVariables>
					<trimStackTrace>false</trimStackTrace>
					<forkedProcessTimeoutInSeconds>1500</forkedProcessTimeoutInSeconds>
					<argLine>-Djava.library.path=${nativelib.directory}</argLine>
					<excludedGroups>de.unileipzig.irpsim.server.marker.PerformanceTest</excludedGroups>
					<!-- skips surefire tests without skipping failsafe tests. Property 
						value seems to magically default to false -->
					<skipTests>${skipUnitTests}</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.1.2</version>
				<configuration>
					<includes>
						<include>**/*.java</include>
					</includes>
					<argLine>-Djava.library.path=${nativelib.directory} -Xms1G -Xmx10G
						-XX:+UseG1GC -Dcom.sun.management.jmxremote
						-Dcom.sun.management.jmxremote.ssl=false
						-Dcom.sun.management.jmxremote.authenticate=false
						-Dcom.sun.management.jmxremote.port=1898
						-Dcom.sun.management.jmxremote.rmi.port=1898</argLine>
					<groups>de.unileipzig.irpsim.server.marker.PerformanceTest</groups>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.3.1</version>
				<executions>
					<execution>
						<id>auto-clean</id>
						<phase>package</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<excludeDefaultDirectories>true</excludeDefaultDirectories>
							<filesets>
								<fileset>
									<directory>src/test/resources/gams/</directory>
								</fileset>
							</filesets>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>Copy JAR</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cp</executable>
							<arguments>
								<argument>${basedir}/../backend-gams/target/backend-gams-${project.version}.jar</argument>
								<argument>${basedir}/target/</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>Database start</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skipTests}</skip>
							<executable>${basedir}/src/test/scripts/starttestdb.sh</executable>
							<arguments>
								<argument>${basedir}/target/import/</argument>
							</arguments>
							<skip>${skipUnitTests}</skip>
						</configuration>
					</execution>
					<execution><!-- Run after tests have been executed -->
						<id>Database stop</id>
						<phase>test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skipTests}</skip>
							<executable>${basedir}/src/test/scripts/stoptestdb.sh</executable>
							<skip>${skipUnitTests}</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<!-- Configures the created archive -->
					<archive>
						<!-- Configures the content of the created manifest -->
						<manifest>
							<!-- Adds the classpath to the created manifest -->
							<addClasspath>true</addClasspath>
							<!-- Specifies that all dependencies of our application are found 
								from the lib directory. -->
							<classpathPrefix>lib/</classpathPrefix>
							<!-- Configures the main class of the application -->
							<mainClass>de.unileipzig.irpsim.server.ServerStarter</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.6.0</version>
				<configuration>
					<!-- Configures the used assembly descriptor -->
					<descriptors>
						<descriptor>src/main/assembly/assembly.xml</descriptor>
					</descriptors>
					<finalName>backend</finalName>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>copy</id>
						<phase>process-classes</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>de.unileipzig.irpsim</groupId>
									<artifactId>gams-native</artifactId>
									<version>24.7.1</version>
									<overWrite>true</overWrite>
									<outputDirectory>${nativelib.directory}</outputDirectory>
									<includes>*.so,*.dll,*.dylib</includes>
								</artifactItem>
							</artifactItems>
							<execute>
								<runOnIncremental>false</runOnIncremental>
							</execute>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>lib-repository</id>
			<name>Local Repository</name>
			<releases>
				<enabled>true</enabled>
				<checksumPolicy>ignore</checksumPolicy>
			</releases>
			<url>file://${basedir}/lib-repository/</url>
		</repository>
		<repository>
			<id>snapshots-repo</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>

		<dependency>
			<groupId>de.unileipzig.irpsim</groupId>
			<artifactId>backend-core</artifactId>
			<version>0.2-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.10.1</version>
		</dependency>

		<dependency>
			<groupId>de.unileipzig.irpsim</groupId>
			<artifactId>backend-core</artifactId>
			<version>0.2-SNAPSHOT</version>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>1.1.1</version>
		</dependency>

		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.32.3.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-jcs-core</artifactId>
			<version>2.2.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.10.0</version>
		</dependency>

		<dependency>
			<groupId>de.jollyday</groupId>
			<artifactId>jollyday</artifactId>
			<version>0.5.10</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.4.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>2.0.9</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito2</artifactId>
			<version>2.0.9</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.24.0</version>
		</dependency>

		<dependency>
			<groupId>net.javacrumbs.json-unit</groupId>
			<artifactId>json-unit</artifactId>
			<version>${json-unit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.javacrumbs.json-unit</groupId>
			<artifactId>json-unit-fluent</artifactId>
			<version>${json-unit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm</artifactId>
			<version>8.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-grizzly2-servlet</artifactId>
			<version>3.1.5</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>2.30.1</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-multipart</artifactId>
			<version>2.30.1</version>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jersey2-jaxrs</artifactId>
			<version>1.6.9</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.4</version>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.200</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-testing</artifactId>
			<version>5.4.18.Final</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<profiles>
		<profile>
			<id>fastTests</id>
			<!-- fastTests beinhaltet alle Tests, die schnell durchlaufen. Damit ist 
				es m√∂glich, in der Testumgebung schnelle R√ºckmeldungen auf √Ñnderungen und 
				ein schnelles Hochladen einer neuen Version umzusetzen. Urspr√ºnglich war 
				es geplant, ein weiteres Profil zu definieren; es reicht aber aus, f√ºr den 
				Sonderfall des schnellen Deployments einen Test zu definieren. -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<forkMode>always</forkMode>
							<includes>
								<include>**/FastTestSuite*</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<nativelib.directory>${project.build.directory}/nativelibs</nativelib.directory>
	</properties>
</project>
